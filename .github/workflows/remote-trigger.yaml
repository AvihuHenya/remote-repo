name: Update Odigos Dependencies

on:   
  repository_dispatch:
    types: [enterprise-dependencies-update]
  workflow_dispatch:

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: github preperation
        id: github_preperation
        run: |
          # Set global Git configurations
          git config --global user.email "bot@keyval.dev"
          git config --global user.name "Odigos Release Bot"
          branch_name="sync-dependencies-bot"
  
      - name: delete existing branch
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Check if a pull request already exists for the branch and close it if it does
          EXISTING_PR=$(gh pr list --head "${{ steps.github_preperation.outputs.branch_name }}" --base "main" --state "open" --json number --jq '.[0].number')
          if [ ! -z "$EXISTING_PR" ]; then
              gh pr close "$EXISTING_PR" --delete-branch
          fi

          BRANCH_EXISTS=$(git ls-remote --heads origin ${{ steps.github_preperation.outputs.branch_name }})
          if [ ! -z "$BRANCH_EXISTS" ]; then
              git push origin --delete ${{ steps.github_preperation.outputs.branch_name }}  
          
      - name: create dependencies update pr
        id: create_dependencies_update_pr
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN}}
        run: |
          git checkout -b ${{ steps.github_preperation.outputs.branch_name }}
          git add .
          git commit -m "update Odigos dependencies"
          git push origin ${{ steps.github_preperation.outputs.branch_name }}

          PR_LINK=$(gh pr create \
            --title "chore: automatic dependencies syncer bot" \
            --body "Automated PR to update Odigos enterprise components after a dependency module merge. \
            PR created by: @${{ github.event.client_payload.pr_creator }}" \
            --base main \
            --head ${{ steps.github_preperation.outputs.branch_name }})
          echo "PR_LINK=$PR_LINK" >> $GITHUB_ENV

          # Extract PR number from PR_LINK
          PR_NUMBER=$(echo "$PR_LINK" | awk -F '/' '{print $NF}')
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV  

      